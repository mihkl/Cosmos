@page "/"
@inject HttpClient Http
@using System.Text.Json
@using System.Text.Json.Serialization
@using Shared

<h3>Find Routes</h3>

<div class="form-group">
    <label>From Planet:</label>
    <select class="form-control" @bind="fromPlanet">
        @foreach (var planet in Enum.GetValues(typeof(Planet)))
        {
            <option value="@planet">@planet</option>
        }
    </select>
</div>

<div class="form-group">
    <label>To Planet:</label>
    <select class="form-control" @bind="toPlanet">
        @foreach (var planet in Enum.GetValues(typeof(Planet)))
        {
            <option value="@planet">@planet</option>
        }
    </select>
</div>

<div class="form-group">
    <label>Companies:</label>
    <select class="form-control" multiple @bind="selectedCompanies">
        @foreach (var company in Enum.GetValues(typeof(SpaceCompany)))
        {
            <option value="@company">@company</option>
        }
    </select>
</div>

<div class="form-group">
    <label>Sort By:</label>
    <select class="form-control" @bind="sortBy">
        <option value="price">Price</option>
        <option value="distance">Distance</option>
        <option value="time">Time</option>
    </select>
</div>

<button class="btn btn-primary" @onclick="FindRoutes">Find Routes</button>

@if (Routes != null)
{
    <h3>Routes:</h3>
    <div class="row">
        @foreach (var route in Routes)
        {
            <div class="col-md-4 mb-3">
                <div class="card" @onclick="() => ToggleRouteDetails(route)">
                    <div class="card-body">
                        <h5 class="card-title">Route</h5>
                        <p class="card-text">Total Price: @route.TotalPrice.ToString("0.00") €</p>
                        <p class="card-text">Total Distance: @route.TotalDistance km</p>
                        <p class="card-text">Companies: @string.Join(", ", route.Companies)</p>
                        <p class="card-text">Total Time: @FormatTime(CalculateTotalRouteTime(route))</p>
                        @if (expandedRoutes.Contains(route))
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var leg in route.Legs)
                                {
                                    <li class="list-group-item">
                                        <p>From: @leg.RouteInfo.From.Name</p>
                                        <p>To: @leg.RouteInfo.To.Name</p>
                                        <p>Provider: @leg.Provider.Company.Name</p>
                                        <p>Price: @leg.Provider.Price.ToString("0.00") €</p>
                                        <p>Departure date: @leg.Provider.FlightStart</p>
                                        <p>Arrival date: @leg.Provider.FlightEnd</p>
                                    </li>
                                }
                            </ul>
                        }
                        <button class="btn btn-primary mt-2" @onclick="() => OpenReservationPopup(route)">Make Reservation</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showReservationPopup)
{
    <div class="modal" tabindex="-1" style="display:block;" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Enter Reservation Details</h5>
                    <button type="button" class="close" @onclick="CloseReservationPopup">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>First Name:</label>
                        <input type="text" class="form-control" @bind="firstName" />
                    </div>
                    <div class="form-group">
                        <label>Last Name:</label>
                        <input type="text" class="form-control" @bind="lastName" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseReservationPopup">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="() => MakeReservation(selectedRoute)">Submit Reservation</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private Planet fromPlanet = Planet.Earth;
    private Planet toPlanet = Planet.Mars;
    private SpaceCompany[] selectedCompanies = Array.Empty<SpaceCompany>();
    private List<RouteDto>? Routes;
    private List<RouteDto> expandedRoutes = new List<RouteDto>();
    private string sortBy = "price";
    private string firstName = string.Empty;
    private string lastName = string.Empty;
    private bool showReservationPopup = false;
    private RouteDto selectedRoute;

    private void OpenReservationPopup(RouteDto route)
    {
        selectedRoute = route;
        showReservationPopup = true;
    }

    private void CloseReservationPopup()
    {
        showReservationPopup = false;
    }

    private async Task MakeReservation(RouteDto route)
    {
        var reservationRequest = new ReservationRequest
        {
            FirstName = firstName,
            LastName = lastName,
            Legs = route.Legs,
            TotalQuotedPrice = route.TotalPrice,
            TransportationCompanyNames = route.Companies
        };

        var response = await Http.PostAsJsonAsync("api/reservations", reservationRequest);

        if (response.IsSuccessStatusCode)
        {
            var reservationResponse = await response.Content.ReadFromJsonAsync<ReservationDto>();
            if (reservationResponse != null)
            {
                Console.WriteLine($"Reservation successful: {reservationResponse.Id}");
            }
            else
            {
                Console.WriteLine("Error in reservation response.");
            }
        }
        else
        {
            Console.WriteLine("Error making reservation.");
        }
        CloseReservationPopup();
    }

    private async Task FindRoutes()
    {
        var queryParams = new Dictionary<string, string>
        {
            { "from", fromPlanet.ToString() },
            { "to", toPlanet.ToString() }
        };

        if (selectedCompanies.Length > 0)
        {
            for (int i = 0; i < selectedCompanies.Length; i++)
            {
                queryParams.Add($"companies[{i}]", selectedCompanies[i].ToString());
            }
        }

        var query = new FormUrlEncodedContent(queryParams);
        var queryString = await query.ReadAsStringAsync();

        var response = await Http.GetFromJsonAsync<List<RouteDto>>($"api/routes?{queryString}");

        Routes = response;

        if (Routes != null)
        {
            switch (sortBy)
            {
                case "price":
                    Routes = Routes.OrderBy(r => r.TotalPrice).ToList();
                    break;
                case "distance":
                    Routes = Routes.OrderBy(r => r.TotalDistance).ToList();
                    break;
                case "time":
                    Routes = Routes.OrderBy(CalculateTotalRouteTime).ToList();
                    break;
            }
        }
        expandedRoutes.Clear();
    }

    private void ToggleRouteDetails(RouteDto route)
    {
        if (expandedRoutes.Contains(route))
        {
            expandedRoutes.Remove(route);
        }
        else
        {
            expandedRoutes.Add(route);
        }
    }

    private string FormatTime(TimeSpan timeSpan)
    {
        return $"{(int)timeSpan.TotalDays}d {timeSpan.Hours}h {timeSpan.Minutes}m";
    }

    private TimeSpan CalculateTotalRouteTime(RouteDto route)
    {
        return TimeSpan.FromMilliseconds(route.Legs.Sum(leg => (leg.Provider.FlightEnd - leg.Provider.FlightStart).TotalMilliseconds));
    }
}