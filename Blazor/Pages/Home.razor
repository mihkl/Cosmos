@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.Text.Json
@using System.Text.Json.Serialization
@using Shared

<div @onclick="HandleClickOutside">
    @if (!firstSearchSubmitted)
    {
        <div class="center-form">
            <div class="input-row">
                <div class="form-group">
                    <select class="form-control" @bind="fromPlanet">
                        @foreach (var planet in Enum.GetValues(typeof(Planet)))
                        {
                            <option value="@planet">@planet</option>
                        }
                    </select>
                </div>

                <span class="arrow-icon">→</span>

                <div class="form-group">
                    <select class="form-control" @bind="toPlanet">
                        @foreach (var planet in Enum.GetValues(typeof(Planet)))
                        {
                            <option value="@planet">@planet</option>
                        }
                    </select>
                </div>

                <div class="form-group company-dropdown" @onclick:stopPropagation>
                    <div class="company-dropdown-button" @onclick="ToggleCompanyDropdown">
                        <span>@GetSelectedCompaniesText()</span>
                        <span>▼</span>
                    </div>
                    <div class="company-dropdown-list @(showCompanyDropdown ? "show" : "")">
                        @foreach (SpaceCompany company in Enum.GetValues(typeof(SpaceCompany)))
                        {
                            <label>
                                <input type="checkbox" value="@company" @onchange="e => ToggleCompanySelection(company, (e.Value as bool?) ?? false)" checked="@selectedCompanies.Contains(company)" />
                                @company
                            </label>
                        }
                    </div>
                </div>

                <button class="btn btn-primary" @onclick="FindRoutes">Find Routes</button>
            </div>
        </div>
    }
    else
    {
        <div class="input-row">
            <div class="form-group">
                <select class="form-control" @bind="fromPlanet">
                    @foreach (var planet in Enum.GetValues(typeof(Planet)))
                    {
                        <option value="@planet">@planet</option>
                    }
                </select>
            </div>

            <span class="arrow-icon">→</span>

            <div class="form-group">
                <select class="form-control" @bind="toPlanet">
                    @foreach (var planet in Enum.GetValues(typeof(Planet)))
                    {
                        <option value="@planet">@planet</option>
                    }
                </select>
            </div>

            <div class="form-group company-dropdown" @onclick:stopPropagation>
                <div class="company-dropdown-button" @onclick="ToggleCompanyDropdown">
                    <span>@GetSelectedCompaniesText()</span>
                    <span>▼</span>
                </div>
                <div class="company-dropdown-list @(showCompanyDropdown ? "show" : "")">
                    @foreach (SpaceCompany company in Enum.GetValues(typeof(SpaceCompany)))
                    {
                        <label>
                            <input type="checkbox" value="@company" @onchange="e => ToggleCompanySelection(company, (e.Value as bool?) ?? false)" checked="@selectedCompanies.Contains(company)" />
                            @company
                        </label>
                    }
                </div>
            </div>

            <button class="btn btn-primary" @onclick="FindRoutes">Find Routes</button>
        </div>

        @if (Routes.Any())
        {
            <div class="form-group">
                <label>Sort By:</label>
                <select class="form-control" @onchange="(e) => ApplyFilters(((ChangeEventArgs)e).Value?.ToString() ?? string.Empty)">
                    <option value="price">Price</option>
                    <option value="distance">Distance</option>
                    <option value="time">Time</option>
                </select>
            </div>

            <div>
                @foreach (var route in Routes)
                {
                    <div class="route-card">
                        <div class="route-details">
                            <ul class="flight-list">
                                @foreach (var leg in route.Legs)
                                {
                                    <li>
                                        <div class="flight-time">
                                            <span class="company-name">@leg.Provider.Company.Name</span> @leg.Provider.FlightStart.ToString("dd/MM/yyyy HH:mm") - @leg.Provider.FlightEnd.ToString("dd/MM/yyyy HH:mm")
                                        </div>
                                        <div class="flight-planets">
                                            @leg.RouteInfo.From.Name - @leg.RouteInfo.To.Name
                                        </div>
                                    </li>
                                }
                            </ul>
                            <div class="company-list">
                                Companies: @string.Join(", ", route.Companies)
                            </div>
                        </div>
                        <div class="route-price-reserve">
                            <div class="route-price">@route.TotalPrice.ToString("0.00") €</div>
                            <div class="flight-duration">
                                Time: @FormatTime(CalculateTotalRouteTime(route))
                            </div>
                            <div class="total-distance">
                                Distance: @route.TotalDistance km
                            </div>
                            <button class="route-reserve-button" @onclick="() => OpenReservationPopup(route)">Reserve</button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="alert alert-info" role="alert">
                No routes found. Please adjust your search criteria.
            </div>
        }
    }

    @if (showReservationPopup)
    {
        <div class="modal" tabindex="-1" style="display:block;" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Enter Reservation Details</h5>
                        <button type="button" class="close" @onclick="CloseReservationPopup">
                            <span>&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label>First Name:</label>
                            <input type="text" class="form-control" @bind="firstName" />
                        </div>
                        <div class="form-group">
                            <label>Last Name:</label>
                            <input type="text" class="form-control" @bind="lastName" />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseReservationPopup">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="() => MakeReservation(selectedRoute)">Submit Reservation</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private Planet fromPlanet = Planet.Earth;
    private Planet toPlanet = Planet.Mars;
    private List<SpaceCompany> selectedCompanies = Enum.GetValues(typeof(SpaceCompany)).Cast<SpaceCompany>().ToList();
    private List<RouteDto> Routes = [];
    private string sortBy = "price";
    private string firstName = string.Empty;
    private string lastName = string.Empty;
    private bool showReservationPopup = false;
    private RouteDto? selectedRoute;
    private bool showCompanyDropdown = false;
    private bool firstSearchSubmitted = false;

    private void OpenReservationPopup(RouteDto route)
    {
        selectedRoute = route;
        showReservationPopup = true;
    }

    private void CloseReservationPopup() => showReservationPopup = false;
    
    private async Task MakeReservation(RouteDto route)
    {
        var reservationRequest = new ReservationRequest
        {
            FirstName = firstName,
            LastName = lastName,
            Legs = route.Legs,
            TotalQuotedPrice = route.TotalPrice,
            TransportationCompanyNames = route.Companies
        };

        var response = await Http.PostAsJsonAsync("api/reservations", reservationRequest);

        if (response.IsSuccessStatusCode)
        {
            var reservationResponse = await response.Content.ReadFromJsonAsync<ReservationDto>();
            if (reservationResponse is not null)
            {
                NavigationManager.NavigateTo("/reservations");
            }
        }
        CloseReservationPopup();
    }
    private async Task FindRoutes()
    {
        var queryParams = new Dictionary<string, string>
        {
            { "from", fromPlanet.ToString() },
            { "to", toPlanet.ToString() }
        };

        if (selectedCompanies.Any())
        {
            for (int i = 0; i < selectedCompanies.Count; i++)
            {
                queryParams.Add($"companies[{i}]", selectedCompanies[i].ToString());
            }
        }

        var query = new FormUrlEncodedContent(queryParams);
        var queryString = await query.ReadAsStringAsync();

        var response = await Http.GetFromJsonAsync<List<RouteDto>>($"api/routes?{queryString}");

        Routes = response ?? [];
        ApplyFilters(sortBy);
        firstSearchSubmitted = true;
    }

    private void ApplyFilters(string sortBy = "price")
    {
        if (Routes is not null)
        {
            switch (sortBy)
            {
                case "price":
                    Routes = Routes.OrderBy(r => r.TotalPrice).ToList();
                    break;
                case "distance":
                    Routes = Routes.OrderBy(r => r.TotalDistance).ToList();
                    break;
                case "time":
                    Routes = Routes.OrderBy(CalculateTotalRouteTime).ToList();
                    break;
            }
        }
    }

    private string FormatTime(TimeSpan timeSpan) => $"{(int)timeSpan.TotalDays}d {timeSpan.Hours}h {timeSpan.Minutes}m";

    private TimeSpan CalculateTotalRouteTime(RouteDto route) => 
        TimeSpan.FromMilliseconds(route.Legs.Last().Provider.FlightEnd.Subtract(route.Legs.First().Provider.FlightStart).TotalMilliseconds);

    private void ToggleCompanySelection(SpaceCompany company, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedCompanies.Contains(company))
            {
                selectedCompanies.Add(company);
            }
        }
        else
        {
            selectedCompanies.Remove(company);
        }
    }

    private string GetSelectedCompaniesText() => 
        selectedCompanies.Count == 0 ? "Select Providers" : $"{selectedCompanies.Count} providers selected";

    private void ToggleCompanyDropdown() => showCompanyDropdown = !showCompanyDropdown;

    private void HandleClickOutside(MouseEventArgs e) => showCompanyDropdown = false;
}