@page "/reservations"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage
@using Shared
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers

<h1>Reservations</h1>

@if (reservations == null)
{
    <p><em>Loading...</em></p>
}
else if (reservations.Count == 0)
{
    <p><em>No reservations found.</em></p>
}
else
{
    @foreach (var reservation in reservations.OrderByDescending(r => r.CreatedAt))
    {
        <div class="reservation-card">
            <div class="reservation-details">
                <p><strong>First Name:</strong> @reservation.FirstName</p>
                <p><strong>Last Name:</strong> @reservation.LastName</p>
                <p class="reservation-price">Total Price: @reservation.TotalQuotedPrice.ToString("0.00") €</p>
                <p><strong>Transportation Companies:</strong> @string.Join(", ", reservation.TransportationCompanyNames)</p>
                @if (reservation.Legs.Any())
                {
                    <p class="flight-summary">
                        <strong>@reservation.Legs.First().RouteInfo.From.Name </strong>(@reservation.Legs.First().Provider.FlightStart)
                        <span class="arrow-icon">→</span>
                        <strong>@reservation.Legs.Last().RouteInfo.To.Name </strong>(@reservation.Legs.Last().Provider.FlightEnd)
                    </p>
                }
            </div>

            <button class="toggle-legs-button" @onclick="() => ToggleLegs(reservation.Id)">
                @(showLegs[reservation.Id] ? "Hide Details" : "Show Details")
            </button>

            @if (showLegs.ContainsKey(reservation.Id) && showLegs[reservation.Id])
            {
                <div class="reservation-legs">
                    <ul class="leg-list">
                        @foreach (var leg in reservation.Legs)
                        {
                            <li>
                                <div class="leg-details">
                                    <p><strong>From:</strong> @leg.RouteInfo.From.Name</p>
                                    <p><strong>To:</strong> @leg.RouteInfo.To.Name</p>
                                    <p><strong>Distance:</strong> @leg.RouteInfo.Distance km</p>
                                    <p><strong>Provider:</strong> <span class="leg-provider">@leg.Provider.Company.Name</span></p>
                                    <p><strong>Price:</strong> @leg.Provider.Price €</p>
                                    <p><strong>Flight Start:</strong> @leg.Provider.FlightStart</p>
                                    <p><strong>Flight End:</strong> @leg.Provider.FlightEnd</p>
                                    <p><strong>Time:</strong> @FormatTime(leg.Provider.FlightEnd, leg.Provider.FlightStart)</p>
                                </div>
                            </li>
                        }
                    </ul>
                </div>
            }
        </div>
    }
}

@code {
    private List<ReservationDto> reservations = [];
    private Dictionary<Guid, bool> showLegs = new Dictionary<Guid, bool>();

    protected override async Task OnInitializedAsync()
    {
        var accessToken = await LocalStorage.GetItemAsync<string>("accessToken");

        if (string.IsNullOrEmpty(accessToken))
        {
            Navigation.NavigateTo("/login");
            return;
        }

        Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);

        try
        {
            reservations = await Http.GetFromJsonAsync<List<ReservationDto>>("api/reservations") ?? [];
            if (reservations is not null)
            {
                foreach (var reservation in reservations)
                {
                    showLegs[reservation.Id] = false;
                }
            }
        }
        catch (Exception ex)
        {
            Navigation.NavigateTo("/login");
        }
    }

    private string FormatTime(DateTime end, DateTime start)
    {
        var timeSpan = end - start;
        return $"{timeSpan.Days}d {timeSpan.Hours}h {timeSpan.Minutes}m";
    }

    private void ToggleLegs(Guid reservationId)
    {
        if (showLegs.ContainsKey(reservationId))
        {
            showLegs[reservationId] = !showLegs[reservationId];
        }
    }
}