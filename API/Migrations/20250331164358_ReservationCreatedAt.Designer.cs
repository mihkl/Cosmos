// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250331164358_ReservationCreatedAt")]
    partial class ReservationCreatedAt
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Shared.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Name")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Shared.Leg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PriceListId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RouteInfoId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.HasIndex("RouteInfoId");

                    b.ToTable("Legs");
                });

            modelBuilder.Entity("Shared.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Shared.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidUntil")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PriceList");
                });

            modelBuilder.Entity("Shared.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FlightEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("FlightStart")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LegId")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LegId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Shared.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("TEXT");

                    b.Property<double>("TotalQuotedPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("TransportationCompanyNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Shared.ReservationLeg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("LegId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LegId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationLegs");
                });

            modelBuilder.Entity("Shared.RouteInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("Distance")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("FromId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ToId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FromId");

                    b.HasIndex("ToId");

                    b.ToTable("RouteInfos");
                });

            modelBuilder.Entity("Shared.Leg", b =>
                {
                    b.HasOne("Shared.PriceList", null)
                        .WithMany("Legs")
                        .HasForeignKey("PriceListId");

                    b.HasOne("Shared.RouteInfo", "RouteInfo")
                        .WithMany()
                        .HasForeignKey("RouteInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RouteInfo");
                });

            modelBuilder.Entity("Shared.Provider", b =>
                {
                    b.HasOne("Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Leg", null)
                        .WithMany("Providers")
                        .HasForeignKey("LegId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Shared.ReservationLeg", b =>
                {
                    b.HasOne("Shared.Leg", "Leg")
                        .WithMany()
                        .HasForeignKey("LegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Reservation", null)
                        .WithMany("ReservationLegs")
                        .HasForeignKey("ReservationId");

                    b.Navigation("Leg");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("Shared.RouteInfo", b =>
                {
                    b.HasOne("Shared.Location", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shared.Location", "To")
                        .WithMany()
                        .HasForeignKey("ToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("Shared.Leg", b =>
                {
                    b.Navigation("Providers");
                });

            modelBuilder.Entity("Shared.PriceList", b =>
                {
                    b.Navigation("Legs");
                });

            modelBuilder.Entity("Shared.Reservation", b =>
                {
                    b.Navigation("ReservationLegs");
                });
#pragma warning restore 612, 618
        }
    }
}
